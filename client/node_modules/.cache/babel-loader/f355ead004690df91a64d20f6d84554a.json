{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firebase-firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyC_o6igNQ77fBrE3zCNfhzhgs7ZuoauFQ4\",\n  authDomain: \"crwn-db-1cd6b.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-1cd6b.firebaseio.com\",\n  projectId: \"crwn-db-1cd6b\",\n  storageBucket: \"crwn-db-1cd6b.appspot.com\",\n  messagingSenderId: \"840002479345\",\n  appId: \"1:840002479345:web:6bec32d3dbf437732df550\",\n  measurementId: \"G-T2K3EZ33QV\"\n}; //api request => async action\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection(\"users\");\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  }); //checking if there are data\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); //trigger google pop up\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider); //multiple popups\n\nexport default firebase; //in case we want the whole library","map":{"version":3,"sources":["C:/Users/Sony Beshi Elect/React Projects/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,6BAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf,C,CAWA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AAEA,QAAMC,QAAQ,GAAG,MAAMN,OAAO,CAACO,GAAR,EAAvB;AACA,QAAMC,kBAAkB,GAAG,MAAMJ,aAAa,CAACG,GAAd,EAAjC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,IAAAA,UAAU,EAAEG,kBAAkB,CAACG,IAAnB,CAAwBC,GAAxB,CAA6BV,GAAD,IAASA,GAAG,CAACW,IAAJ,EAArC;AAAd,GAAZ,EAR2E,CAU3E;;AACA,MAAI,CAACP,QAAQ,CAACQ,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBlB,QAA/B;AACA,UAAMmB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMlB,OAAO,CAACmB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGlB;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOqB,KAAP,EAAc;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCU,KAAK,CAACC,OAAzC;AACD;AACF;;AACD,SAAOrB,OAAP;AACD,CA3BM;AA6BPb,QAAQ,CAACmC,aAAT,CAAuBlC,MAAvB;AAEA,OAAO,MAAMmC,IAAI,GAAGpC,QAAQ,CAACoC,IAAT,EAAb;AACP,OAAO,MAAMtB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMuB,QAAQ,GAAG,IAAIrC,QAAQ,CAACoC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAA4D;;AAC5D,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B,C,CAA+D;;AAEtE,eAAerC,QAAf,C,CAAyB","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firebase-firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyC_o6igNQ77fBrE3zCNfhzhgs7ZuoauFQ4\",\r\n  authDomain: \"crwn-db-1cd6b.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-1cd6b.firebaseio.com\",\r\n  projectId: \"crwn-db-1cd6b\",\r\n  storageBucket: \"crwn-db-1cd6b.appspot.com\",\r\n  messagingSenderId: \"840002479345\",\r\n  appId: \"1:840002479345:web:6bec32d3dbf437732df550\",\r\n  measurementId: \"G-T2K3EZ33QV\",\r\n};\r\n\r\n//api request => async action\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const collectionRef = firestore.collection(\"users\");\r\n\r\n  const snapShot = await userRef.get();\r\n  const collectionSnapshot = await collectionRef.get();\r\n  console.log({ collection: collectionSnapshot.docs.map((doc) => doc.data()) });\r\n\r\n  //checking if there are data\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: \"select_account\" }); //trigger google pop up\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider); //multiple popups\r\n\r\nexport default firebase; //in case we want the whole library\r\n"]},"metadata":{},"sourceType":"module"}